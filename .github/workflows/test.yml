name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  weight-service:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: weight-service

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_weight_db
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install UV
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Add UV to PATH
        run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: uv sync --dev

      - name: Run type checking
        run: uv run mypy src
        continue-on-error: true  # TODO: Fix type errors and remove this

      - name: Run linting
        run: uv run ruff check src
        continue-on-error: true  # Linting warnings shouldn't block pipeline

      - name: Run tests with coverage
        env:
          DB_URL: mysql+aiomysql://root:root@127.0.0.1:3306/test_weight_db
        run: uv run pytest tests/ -v --cov=src --cov-report=xml --cov-report=term --cov-fail-under=80

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./weight-service/coverage.xml
          flags: weight-service
          name: weight-service-coverage

  billing-service:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: billing-service

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_billing_db
        ports:
          - 3307:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install UV
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Add UV to PATH
        run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: uv sync --dev

      - name: Run type checking
        run: uv run mypy src
        continue-on-error: true  # TODO: Fix type errors and remove this

      - name: Run linting
        run: uv run flake8 src tests
        continue-on-error: true  # Linting warnings shouldn't block pipeline

      - name: Check code formatting
        run: uv run black --check src tests
        continue-on-error: true  # Formatting warnings shouldn't block pipeline

      - name: Check import sorting
        run: uv run isort --check-only src tests
        continue-on-error: true  # Import sorting warnings shouldn't block pipeline

      - name: Run tests with coverage
        env:
          DB_URL: mysql+pymysql://root:root@127.0.0.1:3307/test_billing_db
        run: uv run pytest tests/ -v --cov=src --cov-report=xml --cov-report=term --cov-fail-under=80

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./billing-service/coverage.xml
          flags: billing-service
          name: billing-service-coverage

  shift-service:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: shift-service

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_shift_db
        ports:
          - 3308:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install UV
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Add UV to PATH
        run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: uv sync --dev

      - name: Run type checking
        run: uv run mypy src
        continue-on-error: true  # TODO: Fix type errors and remove this

      - name: Run linting
        run: uv run ruff check src
        continue-on-error: true  # Linting warnings shouldn't block pipeline

      - name: Run tests with coverage
        env:
          DB_URL: mysql+aiomysql://root:root@127.0.0.1:3308/test_shift_db
          REDIS_URL: redis://127.0.0.1:6379
        run: |
          if [ -d "tests" ]; then
            uv run pytest tests/ -v --cov=src --cov-report=xml --cov-report=term --cov-fail-under=80
          else
            echo "⚠️ No tests directory found - skipping tests for now"
            exit 0
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./shift-service/coverage.xml
          flags: shift-service
          name: shift-service-coverage

  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run type checking
        run: npm run type-check
        continue-on-error: true  # Type warnings shouldn't block pipeline

      - name: Run linting
        run: npm run lint
        continue-on-error: true  # Linting warnings shouldn't block pipeline

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/coverage-final.json
          flags: frontend
          name: frontend-coverage

  integration-tests:
    runs-on: ubuntu-latest
    needs: [weight-service, billing-service, shift-service, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Create .env file for Docker Compose
        run: |
          cat > .env <<EOF
          # Database Configuration
          MYSQL_ROOT_PASSWORD=test_root_password

          # Weight Service Database
          WEIGHT_DB_NAME=weight_db
          WEIGHT_DB_USER=weight_user
          WEIGHT_DB_PASSWORD=weight_password

          # Billing Service Database
          BILLING_DB_NAME=billing_db
          BILLING_DB_USER=billing_user
          BILLING_DB_PASSWORD=billing_password

          # Shift Service Database
          SHIFT_DB_NAME=shift_db
          SHIFT_DB_USER=shift_user
          SHIFT_DB_PASSWORD=shift_password

          # Redis Configuration
          REDIS_PASSWORD=test_redis_password

          # Provider Registration Service Database (PostgreSQL)
          PROVIDER_DB_NAME=provider_db
          PROVIDER_DB_USER=provider_user
          PROVIDER_DB_PASSWORD=provider_password

          # JWT Configuration
          JWT_SECRET_KEY=test_jwt_secret_key_for_ci_testing_only
          JWT_ALGORITHM=HS256
          JWT_EXPIRATION_MINUTES=30
          EOF

      - name: Start services with Docker Compose
        run: docker compose up -d

      - name: Wait for services via API Gateway
        run: |
          echo "Waiting for API Gateway and services to be ready..."
          echo "Giving MySQL containers time to initialize (90 seconds)..."
          sleep 90

          # Check services via API Gateway (port 80) with retries
          MAX_RETRIES=10
          RETRY_DELAY=5

          check_service() {
            local service_name=$1
            local endpoint=$2
            echo "Checking $service_name..."

            for i in $(seq 1 $MAX_RETRIES); do
              if curl -f "$endpoint"; then
                echo "✅ $service_name is healthy"
                return 0
              fi
              echo "⏳ Attempt $i/$MAX_RETRIES failed, retrying in ${RETRY_DELAY}s..."
              sleep $RETRY_DELAY
            done

            echo "❌ $service_name failed to become healthy"
            return 1
          }

          check_service "weight-service" "http://localhost/api/weight/health" || exit 1
          check_service "billing-service" "http://localhost/api/billing/health" || exit 1
          check_service "shift-service" "http://localhost/api/shift/health" || exit 1
          check_service "provider-registration-service" "http://localhost/api/provider/health" || exit 1
          check_service "frontend" "http://localhost/" || exit 1

          echo "✅ All services healthy via API Gateway"

      - name: Populate test data
        run: |
          echo "Populating test data for E2E tests..."
          docker compose --profile populate run --rm populate-data
          echo "✅ Test data populated"

      - name: Set up Python for E2E tests
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install UV
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Add UV to PATH
        run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install weight-service test dependencies
        working-directory: weight-service
        run: uv sync --dev

      - name: Run E2E integration tests
        working-directory: weight-service
        run: |
          echo "Running E2E tests against live services..."
          uv run pytest tests/test_real_e2e_api_calls.py -v --tb=short
          echo "✅ E2E tests passed"

      - name: Show service logs on failure
        if: failure()
        run: docker compose logs

      - name: Stop services
        if: always()
        run: docker compose down -v

  quality-gate:
    runs-on: ubuntu-latest
    needs: [weight-service, billing-service, shift-service, frontend, integration-tests]

    steps:
      - name: Quality Gate Passed
        run: |
          echo "================================"
          echo "✓ All tests passed!"
          echo "✓ Code quality checks passed!"
          echo "✓ Coverage requirements met!"
          echo "================================"
