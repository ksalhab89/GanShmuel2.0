services:
  # Weight Service Database
  weight-db:
    image: mysql:8.0
    container_name: gan-shmuel-weight-db
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${WEIGHT_DB_NAME}
      MYSQL_USER: ${WEIGHT_DB_USER}
      MYSQL_PASSWORD: ${WEIGHT_DB_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - weight_db_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '1.0'
          memory: 512M
    networks:
      - gan-shmuel-network

  # Billing Service Database  
  billing-db:
    image: mysql:8.0
    container_name: gan-shmuel-billing-db
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${BILLING_DB_NAME}
      MYSQL_USER: ${BILLING_DB_USER}
      MYSQL_PASSWORD: ${BILLING_DB_PASSWORD}
    ports:
      - "3307:3306"
    volumes:
      - billing_db_data:/var/lib/mysql
      - ./billing-service/billingdb.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '1.0'
          memory: 512M
    networks:
      - gan-shmuel-network

  # Shift Service Database
  shift-db:
    image: mysql:8.0
    container_name: gan-shmuel-shift-db
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${SHIFT_DB_NAME}
      MYSQL_USER: ${SHIFT_DB_USER}
      MYSQL_PASSWORD: ${SHIFT_DB_PASSWORD}
    ports:
      - "3308:3306"
    volumes:
      - shift_db_data:/var/lib/mysql
      - ./shift-service/data/01-init-schema.sql:/docker-entrypoint-initdb.d/01-init-schema.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '1.0'
          memory: 512M
    networks:
      - gan-shmuel-network

  # Redis for Shift Service
  shift-redis:
    image: redis:7-alpine
    container_name: gan-shmuel-shift-redis
    ports:
      - "6379:6379"
    volumes:
      - shift_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    networks:
      - gan-shmuel-network

  # Provider Registration Database
  provider-db:
    image: postgres:15-alpine
    container_name: gan-shmuel-provider-db
    environment:
      POSTGRES_DB: ${PROVIDER_DB_NAME}
      POSTGRES_USER: ${PROVIDER_DB_USER}
      POSTGRES_PASSWORD: ${PROVIDER_DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - provider_db_data:/var/lib/postgresql/data
      - ./provider-registration-service/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    networks:
      - gan-shmuel-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PROVIDER_DB_USER} -d ${PROVIDER_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Gateway (Traefik)
  traefik:
    image: traefik:v3.0
    container_name: gan-shmuel-traefik
    ports:
      - "80:80"      # HTTP
      - "443:443"    # HTTPS
      - "9999:9999"  # Dashboard & Metrics
    volumes:
      # Windows WSL2 + Docker Desktop: Use standard path, Docker Desktop handles it
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./infrastructure/gateway/traefik.yml:/etc/traefik/traefik.yml:ro
      - traefik_logs:/var/log/traefik
    environment:
      # Explicitly set Docker endpoint for WSL2
      - DOCKER_HOST=unix:///var/run/docker.sock
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    networks:
      - gan-shmuel-network
    restart: unless-stopped

  # Weight Service
  weight-service:
    build:
      context: ./weight-service
      dockerfile: Dockerfile
    container_name: weight-service
    environment:
      - DATABASE_URL=mysql+aiomysql://${WEIGHT_DB_USER}:${WEIGHT_DB_PASSWORD}@weight-db:3306/${WEIGHT_DB_NAME}
    # PRODUCTION: Ports removed - access via API Gateway only (http://localhost/api/weight/*)
    # DEVELOPMENT: Uncomment for direct access (bypasses gateway)
    # ports:
    #   - "5001:5001"
    volumes:
      - ./weight-service/in:/in
    depends_on:
      weight-db:
        condition: service_healthy
    healthcheck:
      # Override Dockerfile healthcheck - disable it since httpx not available in prod image
      test: ["CMD-SHELL", "exit 0"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.weight.rule=Host(`localhost`) && PathPrefix(`/api/weight`)"
      - "traefik.http.routers.weight.entrypoints=web"
      - "traefik.http.services.weight.loadbalancer.server.port=5001"
      - "traefik.http.middlewares.weight-stripprefix.stripprefix.prefixes=/api/weight"
      - "traefik.http.routers.weight.middlewares=weight-stripprefix"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    networks:
      - gan-shmuel-network

  # Billing Service
  billing-service:
    build:
      context: ./billing-service
      dockerfile: Dockerfile
    container_name: billing-service
    environment:
      - DB_HOST=billing-db
      - DB_PORT=3306
      - DB_NAME=${BILLING_DB_NAME}
      - DB_USER=${BILLING_DB_USER}
      - DB_PASSWORD=${BILLING_DB_PASSWORD}
      - WEIGHT_SERVICE_URL=${WEIGHT_SERVICE_URL}
      - UPLOAD_DIRECTORY=${UPLOAD_DIRECTORY}
    # PRODUCTION: Ports removed - access via API Gateway only (http://localhost/api/billing/*)
    # DEVELOPMENT: Uncomment for direct access (bypasses gateway)
    # ports:
    #   - "5002:5002"
    volumes:
      - ./billing-service/in:/in
    depends_on:
      billing-db:
        condition: service_healthy
      weight-service:
        condition: service_started
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.billing.rule=Host(`localhost`) && PathPrefix(`/api/billing`)"
      - "traefik.http.routers.billing.entrypoints=web"
      - "traefik.http.services.billing.loadbalancer.server.port=5002"
      - "traefik.http.middlewares.billing-stripprefix.stripprefix.prefixes=/api/billing"
      - "traefik.http.routers.billing.middlewares=billing-stripprefix"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    networks:
      - gan-shmuel-network

  # Shift Management Service
  shift-service:
    build:
      context: ./shift-service
      dockerfile: Dockerfile
    container_name: shift-service
    environment:
      DATABASE_URL: mysql+pymysql://${SHIFT_DB_USER}:${SHIFT_DB_PASSWORD}@shift-db:3306/${SHIFT_DB_NAME}
      REDIS_URL: ${REDIS_URL}
      WEIGHT_SERVICE_URL: ${WEIGHT_SERVICE_URL}
      BILLING_SERVICE_URL: ${BILLING_SERVICE_URL}
    # PRODUCTION: Ports removed - access via API Gateway only (http://localhost/api/shift/*)
    # DEVELOPMENT: Uncomment for direct access (bypasses gateway)
    # ports:
    #   - "5003:5003"
    depends_on:
      shift-db:
        condition: service_healthy
      shift-redis:
        condition: service_healthy
      weight-service:
        condition: service_started
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.shift.rule=Host(`localhost`) && PathPrefix(`/api/shift`)"
      - "traefik.http.routers.shift.entrypoints=web"
      - "traefik.http.services.shift.loadbalancer.server.port=5003"
      - "traefik.http.middlewares.shift-stripprefix.stripprefix.prefixes=/api/shift"
      - "traefik.http.routers.shift.middlewares=shift-stripprefix"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    networks:
      - gan-shmuel-network
    restart: unless-stopped

  # Provider Registration Service
  provider-registration-service:
    build:
      context: ./provider-registration-service
      dockerfile: Dockerfile
    container_name: provider-registration-service
    environment:
      - DATABASE_URL=postgresql+asyncpg://${PROVIDER_DB_USER}:${PROVIDER_DB_PASSWORD}@provider-db:5432/${PROVIDER_DB_NAME}
      - BILLING_SERVICE_URL=http://billing-service:5002
      - REDIS_URL=redis://shift-redis:6379/1
    # PRODUCTION: Ports removed - access via API Gateway only (http://localhost/api/provider/*)
    # DEVELOPMENT: Uncomment for direct access (bypasses gateway)
    # ports:
    #   - "5004:5004"
    depends_on:
      provider-db:
        condition: service_healthy
      billing-service:
        condition: service_started
      shift-redis:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.provider.rule=Host(`localhost`) && PathPrefix(`/api/provider`)"
      - "traefik.http.routers.provider.entrypoints=web"
      - "traefik.http.services.provider.loadbalancer.server.port=5004"
      - "traefik.http.middlewares.provider-stripprefix.stripprefix.prefixes=/api/provider"
      - "traefik.http.routers.provider.middlewares=provider-stripprefix"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    networks:
      - gan-shmuel-network
    restart: unless-stopped

  # Prometheus
  prometheus:
    image: prom/prometheus:v3.5.0
    container_name: gan-shmuel-prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./infrastructure/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./infrastructure/monitoring/alerts:/etc/prometheus/alerts:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    networks:
      - gan-shmuel-network
    restart: unless-stopped

  # Grafana (Web UI)
  grafana:
    image: grafana/grafana-enterprise:latest
    container_name: gan-shmuel-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./infrastructure/monitoring/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=
      - GF_FEATURE_TOGGLES_ENABLE=publicDashboards
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    networks:
      - gan-shmuel-network
    restart: unless-stopped

  # MySQL Exporter for Weight Service Database
  weight-mysql-exporter:
    image: prom/mysqld-exporter:v0.15.1
    container_name: gan-shmuel-weight-mysql-exporter
    ports:
      - "9104:9104"
    environment:
      - DATA_SOURCE_NAME=${WEIGHT_DB_USER}:${WEIGHT_DB_PASSWORD}@tcp(weight-db:3306)/${WEIGHT_DB_NAME}
    depends_on:
      weight-db:
        condition: service_healthy
    networks:
      - gan-shmuel-network
    restart: unless-stopped

  # MySQL Exporter for Billing Service Database
  billing-mysql-exporter:
    image: prom/mysqld-exporter:v0.15.1
    container_name: gan-shmuel-billing-mysql-exporter
    ports:
      - "9105:9104"
    environment:
      - DATA_SOURCE_NAME=${BILLING_DB_USER}:${BILLING_DB_PASSWORD}@tcp(billing-db:3306)/${BILLING_DB_NAME}
    depends_on:
      billing-db:
        condition: service_healthy
    networks:
      - gan-shmuel-network
    restart: unless-stopped

  # MySQL Exporter for Shift Service Database
  shift-mysql-exporter:
    image: prom/mysqld-exporter:v0.15.1
    container_name: gan-shmuel-shift-mysql-exporter
    ports:
      - "9106:9104"
    environment:
      - DATA_SOURCE_NAME=${SHIFT_DB_USER}:${SHIFT_DB_PASSWORD}@tcp(shift-db:3306)/${SHIFT_DB_NAME}
    depends_on:
      shift-db:
        condition: service_healthy
    networks:
      - gan-shmuel-network
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: gan-shmuel-frontend
    environment:
      - WEIGHT_SERVICE_URL=${WEIGHT_SERVICE_URL}
      - BILLING_SERVICE_URL=${BILLING_SERVICE_URL}
      - SHIFT_SERVICE_URL=${SHIFT_SERVICE_URL}
    # PRODUCTION: Port removed - access via API Gateway only (http://localhost/)
    # DEVELOPMENT: Uncomment for direct access (bypasses gateway)
    # ports:
    #   - "3000:3000"
    depends_on:
      - weight-service
      - billing-service
      - provider-registration-service
    labels:
      - "traefik.enable=true"
      # Frontend serves root path and all non-API routes (catch-all)
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
      # IMPORTANT: Lowest priority so API routes take precedence
      - "traefik.http.routers.frontend.priority=1"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    networks:
      - gan-shmuel-network

  # Data Population Service (Optional)
  populate-data:
    build:
      context: ./populate-data
      dockerfile: Dockerfile
    container_name: gan-shmuel-populate-data
    depends_on:
      weight-service:
        condition: service_started
      billing-service:
        condition: service_started
      shift-service:
        condition: service_started
    networks:
      - gan-shmuel-network
    profiles:
      - populate

volumes:
  weight_db_data:
  billing_db_data:
  shift_db_data:
  shift_redis_data:
  provider_db_data:
  prometheus_data:
  grafana_data:
  traefik_logs:

networks:
  gan-shmuel-network:
    driver: bridge
